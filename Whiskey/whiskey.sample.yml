# The version being built. It must be a [Semantic Version](http://semver.org). 
# Pre-release metadata is allowed. Build metadata is removed. When running on a build 
# server, the build metadata is replaced with information provided by the build server. 
# The build metadata uses this format `BUILD_NUMBER.BRANCH.COMMIT_ID`. For example, if 
# the current build number is `93`, the branch is `release/2.0`, and the commit ID is 
# `d3833712a970a7b5015725d3e1d0577f7e6475fa`, the build metadata will be 
# `93.release-2.0.d383371`.
#
# If you omit the Version property, a version number is created using this format: 
# `YEAR.MONTHDAY.BUILD_NUMBER`. For example, if today is 3/9/2017 and the build number 
# is `93`, the version number would be `2017.309.93`. When running on a build server, 
# the build metadata is replaced with information provided by the build server. The 
# build metadaa use the format `BRANCH.COMMIT_ID`. For example, if tthe branch is 
# `release/2.0`, and the commit ID is `d3833712a970a7b5015725d3e1d0577f7e6475fa`, the 
# build metadata will be `release-2.0.d383371`.
#
# The version to build may also be taken from a file. See the documentation for the 
# `VersionFrom` property below. If your `whiskey.yml` has both `Version` and 
# `VersionFrom` properties, the `Version` property is used.
Version: 0.0.0

# The `VersionFrom` property is the path to a file that contains the version being 
# built. You may use the path to a:
#
# * Node.js `package.json` file;
# * a PowerShell module manifest (e.g. `.psd1` file)
#
# The `package.json` file must have a `version` property, e.g.
#
#    {
#        "version": "1.0.0"
#    }
#
# The PowerShell module manifest file must contain a `ModuleVersion` property, e.g.
#
#    @{
#        ModuleVersion = '0.14.0';
#    }
# 
# If your `whiskey.yml` has both `Version` and `VersionFrom` properties, the `Version` 
# property is used.
# VersionFrom: 'Whiskey/Whiskey.ps1'

# The branches on which you want to publish a package to ProGet and start a deployment 
# pipeline in BuildMaster, when running on the build server. If you omit the
# `PublishOn` property (i.e. by default), publishing will happen on the `develop`, 
# `release`, and `master` branches and any branch that starts with `release/`.
#
# You can't publish something unless you create a package, so make sure your 
# `BuildTasks` property contains a `ProGetUniversalPackage` task.
#
# You may use regular expressions. Make sure to escape any regular expression 
# operators. If the entire branch name matches one of the items in this list, your 
# package will be published. For example, given the example list below, your package 
# would get published on any of these branches:
# 
# * develop
# * release
# * release/2.0
# * master
#
# Your package would *not* get published on any of these branches:
#
# * development
# * released
# * master/hotfix
#
# The list of branches gets converted to a regular expression using this format:
# `^(ITEM|ITEM|ITEM)$`.
PublishOn:
 - develop
 - release
 - release/.*
 - master
 
# PrereleaseMap is a list of branches to prerelease identifier mappings. Each item
# is a name/value pair. The name is a regular expression and the value is the 
# prerelease identifier. If a branch matches the regular expression, its prerelease
# identifier and an auto-generated version number are automatically added to your 
# package's semantic version. 
#
# You have no control over the prereleae version number.It will not be duplicated 
# across builds/branches. It is not guaranteed to increment by one between builds 
# or start at 1. 
#
# If a branch matches multiple regular expressions, the first match/prerelease 
# identifer is used. 
#
# In the example below, if a branch contains the word `alpha`, and the version
# number is 3.2.1 and the prerelease version is 43, the full semantic version would
# be `3.2.1-alpha.43`. You must also add the branch to the PublishOn element, 
# otherwise your prerelease package will never get published.
PrereleaseMap:
- "\balpha\b": alpha

# The `PublishBuildStatusTo` is a list of publishers where you wnat build status
# information published. Status are published when a build starts, succeeds, and fails. 
# Build statuses are only published when running under a build server. You can only
# report this information to Bitbucket Server.
#
# The BitbucketServer publisher requires two properties:
#
# * Uri: the URI to the Bitbucket Server.
# * CredentialID: the ID of the credential to use when connecting. Credentials are added
#   to the context object returned by `New-WhsCITestContext`, e.g. 
#   `$context.Credentials.Add( 'CREDENTIAL_ID', $credential )
PublishBuildStatusTo:
- BitbucketServer:
    Uri: https://bitbucket.example.com
    CredentialID: BBServer

# An array of build tasks you want to run during a build, e.g.
# 
#     BuildTasks:
#     - TASK_NAME:
#         PROPERTY_ONE: VALUE_ONE
#         PROPERTY_TWO: VALUE_TWO
#
# See the documentation for each individual task for YML samples.
BuildTasks:

# An array of tasks you want to run when publishing, e.g.
# 
#     BuildTasks:
#     - TASK_NAME:
#         PROPERTY_ONE: VALUE_ONE
#         PROPERTY_TWO: VALUE_TWO
#
# Publishing happens when run under a build server and building on a publishing branch.
# Publishing branches are configured with the `PublishOn` property.
#
# See the documentation for each individual task for YML samples.
PublishTasks:
